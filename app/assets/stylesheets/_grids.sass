
// TODO:

// - Better structure, functions, mixins, abstracts
// - Cleanup naming structure
// - Kill the fluidity project
// - Rows should be built for all instances
// - Test and showcase nested
// - Test and show nested offsets
// - Multiple offsets positioning (2 offset / 6 cols / 1 offset / 3 cols)
// - Do the offsets need to be pulled/pushed/fulled for the margins?
// - Showcase all pull/push without expanding size
// - Figure out what to do with sgs push/pull mixins
// - Mesh generator (non-semantic divs)
// - Make sure defaults are set
// - Opt out of +box-sizing(border-box) via a global
// - Remove dependencies from compass
// - Defaults for full, 3/4, 1/2, 1/4, 2/3, 1/3?
// - Defaults for 16:9 and 4:3 ratios and a square?
// - Toggle between fixed and fluid
// - Is there a way to showcase a combo of fixed and fluid layouts
// - Media queries
// - This should be it's own repository (fishnet)
// - Good clean showcase site
// - Test in all browsers
// - Compiler for scss, stylus, less, css

@mixin fn-box-sizing($bs)
  $bs: unquote($bs)
  -moz-box-sizing: $bs
  -webkit-box-sizing: $bs
  -ms-box-sizing:  $bs
  box-sizing:  $bs

@mixin fn_clearfix
  zoom: 1
  &:before,
  &:after
    content: ""
    display: table
  &:after
    clear: both

// Grids based on the [semantic grid system](http://semantic.gs/)

// Utility function for calculating the width of the grid
@function gridsystem-width($columns:$columns)
  @return ($column-width * $columns) + ($gutter-width * $columns)

// Utility function for calculating the width of the grid for push and pull columns
@function gridsystem-half-width($columns:$columns)
  @return ($column-width * $columns) + (($gutter-width * 0.5) * $columns)

// Utility function for calculating the width of the grid for full span columns (push and pull)
@function gridsystem-full-width($columns:$columns)
  @return ($column-width * $columns)

// ----------------------------------------------------------------------------

// Utility function for returning only the `width` value of a `standard` column
@function column-width($x, $columns: $columns)
  $_width: $total-width*(((($gutter-width+$column-width)*$x)-$gutter-width) / gridsystem-width($columns))
  @return $_width

// Utility function for returning only the `width` value of a `pull` column
@function column-pull-width($x, $columns: $columns)
  $_gutter-half: $gutter-width * 0.5
  $_width: $total-width*(((($_gutter-half+$column-width)*$x)-$_gutter-half) / gridsystem-half-width($columns))
  @return $_width

// Utility function for returning only the `width` value of a `push` column
@function column-push-width($x, $columns: $columns)
  @return column-pull-width($x, $columns)

@function column-full-width($x, $columns: $columns)
  $_width: $total-width*(((($column-width)*$x)) / gridsystem-full-width($columns))
  @return $_width

// ----------------------------------------------------------------------------

@function offset-width($offset)
  @return $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns))

// ----------------------------------------------------------------------------

// Utility function for returning only the `width` value for a gutter
@function gutter-space($columns)
  @return $total-width*(($gutter-width*.5)/gridsystem-width($columns))

// ----------------------------------------------------------------------------

.base-column
  +fn-box-sizing(border-box)
  display: inline
  float: left

.base-row
  +fn-box-sizing(border-box)
  +fn_clearfix
  display: block

// ----------------------------------------------------------------------------

@mixin row($columns: $columns)
  +fn_clearfix
  display: block
  width: $total-width*(($gutter-width + gridsystem-width($columns))/gridsystem-width($columns))
  margin: 0 $total-width*((($gutter-width*.5)/gridsystem-width($columns))*-1)

// ----------------------------------------------------------------------------

@mixin column($x, $columns: $columns)
  @extend .base-column
  margin-left: gutter-space($columns)
  margin-right: gutter-space($columns)
  width: column-width($x, $columns)

@mixin column-pull($x, $columns: $columns, $resize: true)
  @extend .base-column
  margin-left: 0
  margin-right: gutter-space($columns)
  @if $resize == true
    width: column-pull-width($x, $columns)
  @else
    width: column-width($x, $columns)

@mixin column-push($x, $columns: $columns, $resize: true)
  @extend .base-column
  margin-left: gutter-space($columns)
  margin-right: 0
  @if $resize == true
    width: column-push-width($x, $columns)
  @else
    width: column-width($x, $columns)

@mixin column-full($x, $columns: $columns)
  @extend .base-column
  margin-left: 0
  margin-right: 0
  width: column-full-width($x, $columns)

// ----------------------------------------------------------------------------
@mixin column-offset-left($x, $offset: 0, $columns: $columns)
  @extend .base-column
  margin-left: offset-width($offset)
  margin-right: gutter-space($columns)
  width: column-width($x, $columns)

@mixin column-offset-left-pull($x, $offset, $columns: $columns, $resize: true)
  @extend .base-column
  margin-left: offset-width($offset) - gutter-space($columns)
  margin-right: gutter-space($columns)
  @if $resize == true
    width: column-pull-width($x, $columns)
  @else
    width: column-width($x, $columns)

@mixin column-offset-left-push($x, $offset, $columns: $columns, $resize: true)
  @extend .base-column
  margin-left: offset-width($offset)
  margin-right: 0
  @if $resize == true
    width: column-push-width($x, $columns)
  @else
    width: column-width($x, $columns)

@mixin column-offset-left-full($x, $offset, $columns: $columns)
  @extend .base-column
  margin-left: offset-width($offset) - gutter-space($columns)
  margin-right: 0
  width: column-full-width($x, $columns)

@mixin column-offset-right($x, $offset: 0, $columns: $columns)
  @extend .base-column
  margin-left: gutter-space($columns)
  margin-right: offset-width($offset)
  width: column-width($x, $columns)

@mixin column-offset-right-pull($x, $offset, $columns: $columns, $resize: true)
  @extend .base-column
  margin-left: 0
  margin-right: offset-width($offset) - gutter-space($columns)
  @if $resize == true
    width: column-pull-width($x, $columns)
  @else
    width: column-width($x, $columns)

@mixin column-offset-right-push($x, $offset, $columns: $columns, $resize: true)
  @extend .base-column
  margin-left: gutter-space($columns)
  margin-right: offset-width($offset) - gutter-space($columns)
  @if $resize == true
    width: column-push-width($x, $columns)
  @else
    width: column-width($x, $columns)

@mixin column-offset-right-full($x, $offset, $columns: $columns)
  @extend .base-column
  margin-left: 0
  margin-right: offset-width($offset) - gutter-space($columns)
  width: column-full-width($x, $columns)


// ----------------------------------------------------------------------------
@mixin push($offset: 1)
  margin-left: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns))

@mixin pull($offset: 1)
  margin-right: $total-width*((($gutter-width+$column-width)*$offset) / gridsystem-width($columns)) + $total-width*(($gutter-width*.5)/gridsystem-width($columns))

